name: RPM Release

# Manually trigger a new RPM release:
#   1. Increases the major/minor/patch version, based on user input
#   2. Commits and tags new version in GitHub
#   3. Creates a PR to merge updated version number into main branch (shim)
#   4. Creates a Release with auto generated release notes
#   5. Builds and publishes RPM to repository

# Notes/Troubleshooting:
# - This workflow depends on the version number in setup.py having
#   major.minor.patch format
# - If the project already has a setup.cfg file, the bumpversion configuration
#   below will need to be added to the file


on:
  workflow_dispatch:
    inputs:
      update_type:
        description: "Type of update (patch/minor/major)"
        required: true
        default: patch


# Review environment variables below and change as necessary

env:
  TMP_DIR: /tmp/${{ github.repository }}
  REPO_USER: github-runner
  REPO_SERVER: jenkins-master.itio.tamu.edu
  APPLICATION_PATH: <application path>
  APPLICATION_NAME: <application name>
  RPM_NAME: <rpm name>
  INCLUDE_CAS_CLIENT: "Y"
  INCLUDE_TAMU_ACCOUNT: "Y"
  INCLUDE_GATEWAY_SERVICES: "Y"

jobs:
  prep:
    runs-on: [self-hosted, linux, docker]
    outputs:
      runner-user: ${{ steps.step1.outputs.runner-user }}
    steps:
    - name: Verify inputs
      run: |
        update_type=${{ github.event.inputs.update_type }}
        [[ "$update_type" = "patch" || "$update_type" = "minor" || "$update_type" = "major" ]]
    - name: Get Runner User for use in Docker
      id: step1
      run: |
        RUNNER_USER=$(id -u)
        echo "::set-output name=runner-user::$RUNNER_USER"

  build:
    runs-on: [self-hosted, linux, docker]
    needs: [prep]
    outputs:
      release-version: ${{ steps.increase-version.outputs.release-version }}
    container:
      image: ghcr.io/jzylks/centos-django-rpm:latest
      volumes:
        - ${{ github.workspace }}:/data
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
    - name: Increase version
      id: increase-version
      run: |
        # Initialize setup.cfg if it does not exist
        OLD_VERSION=$(python setup.py --version)
        if [[ ! -f setup.cfg ]]
        then
          cat > setup.cfg <<EOF
        [bumpversion]
        current_version = $OLD_VERSION
        commit = 1
        tag = 1
        EOF
        fi

        # Set git name and email and clear any tags that may be present from a previous build
        git config --global user.name '${{ github.actor }}'
        git config --global user.email '${{ github.actor }}@users.noreply.github.com'
        git tag -d $(git tag -l)

        # Bump major/minor/patch version, commit and tag
        bump2version --commit --tag ${{ github.event.inputs.update_type }} setup.py
        
        # Capture the new version number and create a new branch; branch protection rules will 
        # not allow push directly to main branch. This adds a manual step to merge the PR, and
        # results in the previous version bump being included in the current release's notes
        RELEASE_VERSION=$(python setup.py --version)
        git checkout -b "release-v$RELEASE_VERSION"
        git push -u origin "release-v$RELEASE_VERSION"
        git push --tags

        # Save release version to open the PR and create the Release
        echo "::set-output name=release-version::$RELEASE_VERSION"
    - name: Checkout CAS Client
      if: env.INCLUDE_CAS_CLIENT == 'Y'
      uses: tamu-it-syse/.github/checkout/tamucas-client@v1
      with:
        ssh-key: ${{ secrets.TAMUCAS_CLIENT_DEPLOY_KEY }}
    - name: Checkout Gateway-Services
      if: env.INCLUDE_GATEWAY_SERVICES == 'Y'
      uses: tamu-it-syse/.github/checkout/Gateway-Services@v1
      with:
        ssh-key: ${{ secrets.GATEWAY_SERVICES_DEPLOY_KEY }}
    - name: Checkout TAMU-Account
      if: env.INCLUDE_TAMU_ACCOUNT == 'Y'
      uses: tamu-it-syse/.github/checkout/tamu-account@v1
      with:
        ssh-key: ${{ secrets.TAMU_ACCOUNT_DEPLOY_KEY }}
    - name: Create Virtual Environment
      uses: tamu-it-syse/.github/build_venv@v1
      with:
        runner-user: ${{ needs.prep.outputs.runner-user }}

  create-pr-and-release:
    runs-on: [self-hosted, linux, docker]
    needs: [prep, build]
    steps:
    - name: Create PR and Release
      uses: actions/github-script@v5
      with:
        script: |
          github.rest.pulls.create(
            {
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Finalize Release ${{ needs.build.outputs.release-version }}",
              head: "release-v${{ needs.build.outputs.release-version }}",
              base: "main",
              body: "This pull request should be merged before attempting another release."
            }
          )
          github.rest.repos.createRelease(
            {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "v${{ needs.build.outputs.release-version }}",
              generate_release_notes: true
            }
          )

  build-production-rpm:
    runs-on: [self-hosted, linux, docker]
    needs: [prep, build]
    container:
      image: ghcr.io/jzylks/centos-django-rpm:latest
      volumes:
        - ${{ github.workspace }}:/data
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: tamu-it-syse/.github/build_rpm@v1
      with:
        rpm-name: ${{ env.RPM_NAME }}
        runner-user: ${{ needs.prep.outputs.runner-user }}

  publish-production-rpm:
    runs-on: [self-hosted, linux, docker]
    needs: build-production-rpm
    steps:
    - uses: tamu-it-syse/.github/publish_rpm@v1
      with:
        repo-deploy-key: ${{ secrets.REPO_DEPLOY_KEY }}
        rpm-signing-password: ${{ secrets.RPM_SIGNING_PASSWORD }}
        rpm-name: ${{ env.RPM_NAME }}
    - name: Cleaning up
      if: ${{ always() }}
      run: |
        rm -r ${TMP_DIR}/${GITHUB_RUN_ID}/.ssh || true
